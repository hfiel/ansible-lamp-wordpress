---

#Important: when installing mysql you must do it with a password for root.

#See: https://stackoverflow.com/questions/40050219/rootlocalhost-password-set-with-ansible-mysql-user-module-doesnt-work#40059130

##If mysql is installed without password, the root account has:
#
# mysql> use mysql;
# Database changed
# mysql> select User, plugin from user where User='root';
# +------+-----------------------+
# | User | plugin                |
# +------+-----------------------+
# | root | auth_socket |
# +------+-----------------------+
# 1 row in set (0.00 sec)

## This causes all mysql_user module connections to fail.

####SOLUTIONS:

# A)
## You can change the setting manually in the mysql server in order to move on
## BUT this will requiere manual intervention every time you deploy a server
# mysql> update user set plugin='mysql_native_password' where User='root';
# Query OK, 0 rows affected (0.00 sec)
# Rows matched: 1  Changed: 0  Warnings: 0
#
# mysql> select User, plugin from user where User='root';
# +------+-----------------------+
# | User | plugin                |
# +------+-----------------------+
# | root | mysql_native_password |
# +------+-----------------------+
# 1 row in set (0.00 sec)


# B)
## Install mysql with a password using debconf (as done here)


#####

#TODO: add conditions so debconf and install steps do not run IF mysql is already installed

- name: Specify MySQL root password before installing
  debconf:
    name: 'mysql-server'
    question: 'mysql-server/root_password'
    value: '{{mysql_root_db_pass | quote}}'
    vtype: 'password'
  become: true

- name: Confirm MySQL root password before installing
  debconf:
    name: 'mysql-server'
    question: 'mysql-server/root_password_again'
    value: '{{mysql_root_db_pass | quote}}'
    vtype: 'password'
  become: true

#install mysql from a package list defined in vars
- name: Install mysql packages
  apt:
    name: "{{ mysql_packages }}"
    state: latest

#install python modules from a modules list defined in vars
- name: Install the required python modules with pip
  pip:
    name: "{{ mysql_python_modules }}"

# enable mysql service
- name: enable mysql
  service:
   name: "{{ mysql_service }}"
   state: started
   enabled: yes

#this is always first step: we reset the root password
## In a first clean run, it will set the password directly (we defined it before install with debconf)
## In subsequent runs, it will read the current password from .my.cnf
- name: update mysql root password (not localhost)
  mysql_user:
    login_user: root
    login_password: "{{ mysql_root_db_pass }}"
    name: root
    password: "{{ mysql_root_db_pass }}"
    host: "{{ item }}"
  with_items:
   - "{{ ansible_hostname }}"
   - 127.0.0.1
   - ::1
   - localhost
#WARNING: uncomment this next line '- "%"' to allow root connections from ANY host (insecure setting)
#   - "%"

#this is always second step: we create .my.cnf
- name: copy .my.cnf file with root password credentials
  template:
    src: .my.cnf.j2
    dest: ~/.my.cnf
    mode: 0600

- name: Copy mysql config
  template:
      src: my.cnf.j2
      dest: "{{ mysql_conf_dir }}/mysql.conf.d/mysqld.cnf"
  notify: restart mysql

- name: Create the directory /etc/mysql/conf.d
  file:
    path: /etc/mysql/conf.d
    state: directory
  notify: restart mysql

- name: ensure anonymous users are not in the database
  mysql_user:
   name: ''
   host: "{{ item }}"
   state: absent
  with_items:
  - localhost
  - "{{ ansible_hostname }}"

- name: remove the test database
  mysql_db:
   name: test
   state: absent

- name: Create the MySQL databases
  mysql_db:
    name: "{{ item.name }}"
    state: present
  with_items: "{{ mysql_db }}"
  when: mysql_db|lower() != 'none'

- name: Create the database users
  mysql_user:
    name={{ item.name }}
    password={{ item.pass|default("foobar") }}
    priv={{ item.priv|default("*.*:ALL") }}
    state=present
    host=%
  with_items: "{{ mysql_users }}"
  when: mysql_users|lower() != 'none'
  notify: restart mysql

...
